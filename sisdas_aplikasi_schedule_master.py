# -*- coding: utf-8 -*-
"""Sisdas Aplikasi Schedule Master

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qwST3X2kz6UZ9YQXpP2wChghA79BzFYE
"""

!pip install dash dash-bootstrap-components pandas flask-ngrok

import dash
import dash_bootstrap_components as dbc
from dash import dcc, html
from dash.dependencies import Input, Output, State
import pandas as pd
from flask_ngrok import run_with_ngrok
from flask import Flask
from datetime import datetime

# Setup the app
server = Flask(__name__)
app = dash.Dash(__name__, server=server, external_stylesheets=[dbc.themes.BOOTSTRAP])
run_with_ngrok(server)  # Start ngrok when the app is run

# Create a DataFrame to hold the schedule
schedule_df = pd.DataFrame(columns=['Task', 'Date', 'Time', 'Description'])

# App layout
app.layout = dbc.Container([
    dbc.Row(dbc.Col(html.H1("Schedule Master", className="text-center text-primary mb-4"), width=12)),

    # Input section
    dbc.Row([
        dbc.Col(dbc.Input(id="task-input", placeholder="Enter task...", type="text"), width=3),
        dbc.Col(dbc.Input(id="date-input", placeholder="Enter date (YYYY-MM-DD)...", type="text"), width=3),
        dbc.Col(dbc.Input(id="time-input", placeholder="Enter time (HH:MM)...", type="text"), width=2),
        dbc.Col(dbc.Input(id="desc-input", placeholder="Enter description...", type="text"), width=3),
        dbc.Col(dbc.Button("Add Task", id="add-btn", color="primary"), width=1)
    ], className="mb-3"),

    # Schedule table section
    dbc.Row([
        dbc.Col(html.Div(id="schedule-table"), width=12)
    ]),

    # Task search and delete section
    dbc.Row([
        dbc.Col(dbc.Input(id="delete-task-input", placeholder="Task to delete...", type="text"), width=6),
        dbc.Col(dbc.Button("Delete Task", id="delete-btn", color="danger"), width=2)
    ], className="mb-4"),

    # Task search section
    dbc.Row([
        dbc.Col(dbc.Input(id="search-task-input", placeholder="Search task...", type="text"), width=6),
        dbc.Col(dbc.Button("Search Task", id="search-btn", color="secondary"), width=2),
        dbc.Col(html.Div(id="search-result"), width=12)
    ]),

    # Visualization (future improvement for timeline view)
    dbc.Row([
        dbc.Col(html.Div("Timeline View (coming soon)", id="timeline-view"), width=12)
    ])
], fluid=True)

# Callback to add task
@app.callback(
    Output("schedule-table", "children"),
    [Input("add-btn", "n_clicks")],
    [State("task-input", "value"), State("date-input", "value"), State("time-input", "value"), State("desc-input", "value")]
)
def add_task(n_clicks, task, date, time, desc):
    global schedule_df
    if n_clicks and task and date and time and desc:
        new_task = pd.DataFrame({
            'Task': [task],
            'Date': [date],
            'Time': [time],
            'Description': [desc]
        })
        schedule_df = pd.concat([schedule_df, new_task], ignore_index=True)
    return create_table(schedule_df)

# Callback to delete task
@app.callback(
    Output("schedule-table", "children"),
    [Input("delete-btn", "n_clicks")],
    [State("delete-task-input", "value")]
)
def delete_task(n_clicks, task_name):
    global schedule_df
    if n_clicks and task_name:
        schedule_df = schedule_df[schedule_df['Task'] != task_name]
    return create_table(schedule_df)

# Callback to search task
@app.callback(
    Output("search-result", "children"),
    [Input("search-btn", "n_clicks")],
    [State("search-task-input", "value")]
)
def search_task(n_clicks, task_name):
    if n_clicks and task_name:
        task = schedule_df[schedule_df['Task'] == task_name]
        if not task.empty:
            return html.Div([html.H5(f"Task Found: {task_name}"), create_table(task)])
        else:
            return html.Div(f"Task '{task_name}' not found!")
    return ""

# Utility function to create table
def create_table(dataframe):
    return dbc.Table.from_dataframe(dataframe, striped=True, bordered=True, hover=True)

# Callback to add task
@app.callback(
    Output("schedule-table", "children"),
    [Input("add-btn", "n_clicks")],
    [State("task-input", "value"), State("date-input", "value"), State("time-input", "value"), State("desc-input", "value")]
)
def add_task(n_clicks, task, date, time, desc):
    global schedule_df
    if n_clicks and task and date and time and desc:
        new_task = pd.DataFrame({
            'Task': [task],
            'Date': [date],
            'Time': [time],
            'Description': [desc]
        })
        schedule_df = pd.concat([schedule_df, new_task], ignore_index=True)
    return create_table(schedule_df)

# Callback to delete task
@app.callback(
    Output("schedule-table", "children"),
    [Input("delete-btn", "n_clicks")],
    [State("delete-task-input", "value")]
)
def delete_task(n_clicks, task_name):
    global schedule_df
    if n_clicks and task_name:
        schedule_df = schedule_df[schedule_df['Task'] != task_name]
    return create_table(schedule_df)

# Callback to search task
@app.callback(
    Output("search-result", "children"),
    [Input("search-btn", "n_clicks")],
    [State("search-task-input", "value")]
)
def search_task(n_clicks, task_name):
    if n_clicks and task_name:
        task = schedule_df[schedule_df['Task'] == task_name]
        if not task.empty:
            return html.Div([html.H5(f"Task Found: {task_name}"), create_table(task)])
        else:
            return html.Div(f"Task '{task_name}' not found!")
    return ""

# Utility function to create table
def create_table(dataframe):
    return dbc.Table.from_dataframe(dataframe, striped=True, bordered=True, hover=True)

# Run the server
if __name__ == '__main__':
    app.run_server()